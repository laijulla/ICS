> library(arulesViz)
> library(datasets)
> data(Groceries)
> Groceries
transactions in sparse format with
 9835 transactions (rows) and
 169 items (columns)
> head(Groceries)
transactions in sparse format with
 6 transactions (rows) and
 169 items (columns)
> summary(Groceries)
transactions as itemMatrix in sparse format with
 9835 rows (elements/itemsets/transactions) and
 169 columns (items) and a density of 0.026 

most frequent items:
      whole milk other vegetables       rolls/buns             soda           yogurt          (Other) 
            2513             1903             1809             1715             1372            34055 

element (itemset/transaction) length distribution:
sizes
   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18   19   20   21 
2159 1643 1299 1005  855  645  545  438  350  246  182  117   78   77   55   46   29   14   14    9   11 
  22   23   24   26   27   28   29   32 
   4    6    1    1    1    1    3    1 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1       2       3       4       6      32 

includes extended item information - examples:
       labels  level2           level1
1 frankfurter sausage meat and sausage
2     sausage sausage meat and sausage
3  liver loaf sausage meat and sausage
> show(Groceries)
transactions in sparse format with
 9835 transactions (rows) and
 169 items (columns)
> itemFrequencyPlot(Groceries,topN=20,type="absolute")
> rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target   ext
        0.8    0.1    1 none FALSE            TRUE       5   0.001      1     10  rules FALSE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 9 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[169 item(s), 9835 transaction(s)] done [0.00s].
sorting and recoding items ... [157 item(s)] done [0.00s].
creating transaction tree ... done [0.02s].
checking subsets of size 1 2 3 4 5 6 done [0.01s].
writing ... [410 rule(s)] done [0.00s].
creating S4 object  ... done [0.01s].
> options(digits=2)
> inspect(rules[1:5])
    lhs                        rhs            support confidence lift count
[1] {liquor,red/blush wine} => {bottled beer} 0.0019  0.90       11.2 19   
[2] {curd,cereals}          => {whole milk}   0.0010  0.91        3.6 10   
[3] {yogurt,cereals}        => {whole milk}   0.0017  0.81        3.2 17   
[4] {butter,jam}            => {whole milk}   0.0010  0.83        3.3 10   
[5] {soups,bottled beer}    => {whole milk}   0.0011  0.92        3.6 11   
> rules<-sort(rules, by="confidence", decreasing=TRUE)
> rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8,maxlen=3))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target   ext
        0.8    0.1    1 none FALSE            TRUE       5   0.001      1      3  rules FALSE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 9 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[169 item(s), 9835 transaction(s)] done [0.00s].
sorting and recoding items ... [157 item(s)] done [0.02s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [29 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
Warning message:
In apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8,  :
  Mining stopped (maxlen reached). Only patterns up to a length of 3 returned!
> print(rules)
set of 29 rules 
> subset.matrix <- is.subset(rules, rules)
> subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
Warning message:
In `[<-`(`*tmp*`, as.vector(i), value = NA) :
  x[.] <- val: x is “ngTMatrix”, val not in {TRUE, FALSE} is coerced; NA |--> TRUE.
> redundant <- colSums(subset.matrix, na.rm=T) >= 1
> rules.pruned <- rules[!redundant]
> rules<-rules.pruned
> rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.08), 
+                appearance = list(default="lhs",rhs="whole milk"),
+                control = list(verbose=F))
> rules<-sort(rules, decreasing=TRUE,by="confidence")
> inspect(rules[1:5])
    lhs                                           rhs          support confidence lift count
[1] {rice,sugar}                               => {whole milk} 0.0012  1          3.9  12   
[2] {canned fish,hygiene articles}             => {whole milk} 0.0011  1          3.9  11   
[3] {root vegetables,butter,rice}              => {whole milk} 0.0010  1          3.9  10   
[4] {root vegetables,whipped/sour cream,flour} => {whole milk} 0.0017  1          3.9  17   
[5] {butter,soft cheese,domestic eggs}         => {whole milk} 0.0010  1          3.9  10   
> rules<-apriori(data=Groceries, parameter=list(supp=0.001,conf = 0.15,minlen=2), 
+                appearance = list(default="rhs",lhs="whole milk"),
+                control = list(verbose=F))
> rules<-sort(rules, decreasing=TRUE,by="confidence")
> inspect(rules[1:5])
    lhs             rhs                support confidence lift count
[1] {whole milk} => {other vegetables} 0.075   0.29       1.5  736  
[2] {whole milk} => {rolls/buns}       0.057   0.22       1.2  557  
[3] {whole milk} => {yogurt}           0.056   0.22       1.6  551  
[4] {whole milk} => {root vegetables}  0.049   0.19       1.8  481  
[5] {whole milk} => {tropical fruit}   0.042   0.17       1.6  416  